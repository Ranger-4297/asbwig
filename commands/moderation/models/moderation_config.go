// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ModerationConfig is an object representing the database table.
type ModerationConfig struct {
	GuildID string      `boil:"guild_id" json:"guild_id" toml:"guild_id" yaml:"guild_id"`
	ModLog  null.String `boil:"mod_log" json:"mod_log,omitempty" toml:"mod_log" yaml:"mod_log,omitempty"`

	R *moderationConfigR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L moderationConfigL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ModerationConfigColumns = struct {
	GuildID string
	ModLog  string
}{
	GuildID: "guild_id",
	ModLog:  "mod_log",
}

var ModerationConfigTableColumns = struct {
	GuildID string
	ModLog  string
}{
	GuildID: "moderation_config.guild_id",
	ModLog:  "moderation_config.mod_log",
}

// Generated where

var ModerationConfigWhere = struct {
	GuildID whereHelperstring
	ModLog  whereHelpernull_String
}{
	GuildID: whereHelperstring{field: "\"moderation_config\".\"guild_id\""},
	ModLog:  whereHelpernull_String{field: "\"moderation_config\".\"mod_log\""},
}

// ModerationConfigRels is where relationship names are stored.
var ModerationConfigRels = struct {
	GuildModerationCases string
}{
	GuildModerationCases: "GuildModerationCases",
}

// moderationConfigR is where relationships are stored.
type moderationConfigR struct {
	GuildModerationCases ModerationCaseSlice `boil:"GuildModerationCases" json:"GuildModerationCases" toml:"GuildModerationCases" yaml:"GuildModerationCases"`
}

// NewStruct creates a new relationship struct
func (*moderationConfigR) NewStruct() *moderationConfigR {
	return &moderationConfigR{}
}

func (r *moderationConfigR) GetGuildModerationCases() ModerationCaseSlice {
	if r == nil {
		return nil
	}
	return r.GuildModerationCases
}

// moderationConfigL is where Load methods for each relationship are stored.
type moderationConfigL struct{}

var (
	moderationConfigAllColumns            = []string{"guild_id", "mod_log"}
	moderationConfigColumnsWithoutDefault = []string{"guild_id"}
	moderationConfigColumnsWithDefault    = []string{"mod_log"}
	moderationConfigPrimaryKeyColumns     = []string{"guild_id"}
	moderationConfigGeneratedColumns      = []string{}
)

type (
	// ModerationConfigSlice is an alias for a slice of pointers to ModerationConfig.
	// This should almost always be used instead of []ModerationConfig.
	ModerationConfigSlice []*ModerationConfig

	moderationConfigQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	moderationConfigType                 = reflect.TypeOf(&ModerationConfig{})
	moderationConfigMapping              = queries.MakeStructMapping(moderationConfigType)
	moderationConfigPrimaryKeyMapping, _ = queries.BindMapping(moderationConfigType, moderationConfigMapping, moderationConfigPrimaryKeyColumns)
	moderationConfigInsertCacheMut       sync.RWMutex
	moderationConfigInsertCache          = make(map[string]insertCache)
	moderationConfigUpdateCacheMut       sync.RWMutex
	moderationConfigUpdateCache          = make(map[string]updateCache)
	moderationConfigUpsertCacheMut       sync.RWMutex
	moderationConfigUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// OneG returns a single moderationConfig record from the query using the global executor.
func (q moderationConfigQuery) OneG(ctx context.Context) (*ModerationConfig, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single moderationConfig record from the query.
func (q moderationConfigQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ModerationConfig, error) {
	o := &ModerationConfig{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for moderation_config")
	}

	return o, nil
}

// AllG returns all ModerationConfig records from the query using the global executor.
func (q moderationConfigQuery) AllG(ctx context.Context) (ModerationConfigSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all ModerationConfig records from the query.
func (q moderationConfigQuery) All(ctx context.Context, exec boil.ContextExecutor) (ModerationConfigSlice, error) {
	var o []*ModerationConfig

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ModerationConfig slice")
	}

	return o, nil
}

// CountG returns the count of all ModerationConfig records in the query using the global executor
func (q moderationConfigQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all ModerationConfig records in the query.
func (q moderationConfigQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count moderation_config rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q moderationConfigQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q moderationConfigQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if moderation_config exists")
	}

	return count > 0, nil
}

// GuildModerationCases retrieves all the moderation_case's ModerationCases with an executor via guild_id column.
func (o *ModerationConfig) GuildModerationCases(mods ...qm.QueryMod) moderationCaseQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"moderation_cases\".\"guild_id\"=?", o.GuildID),
	)

	return ModerationCases(queryMods...)
}

// LoadGuildModerationCases allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (moderationConfigL) LoadGuildModerationCases(ctx context.Context, e boil.ContextExecutor, singular bool, maybeModerationConfig interface{}, mods queries.Applicator) error {
	var slice []*ModerationConfig
	var object *ModerationConfig

	if singular {
		var ok bool
		object, ok = maybeModerationConfig.(*ModerationConfig)
		if !ok {
			object = new(ModerationConfig)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeModerationConfig)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeModerationConfig))
			}
		}
	} else {
		s, ok := maybeModerationConfig.(*[]*ModerationConfig)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeModerationConfig)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeModerationConfig))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &moderationConfigR{}
		}
		args[object.GuildID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &moderationConfigR{}
			}
			args[obj.GuildID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`moderation_cases`),
		qm.WhereIn(`moderation_cases.guild_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load moderation_cases")
	}

	var resultSlice []*ModerationCase
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice moderation_cases")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on moderation_cases")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for moderation_cases")
	}

	if singular {
		object.R.GuildModerationCases = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &moderationCaseR{}
			}
			foreign.R.Guild = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.GuildID == foreign.GuildID {
				local.R.GuildModerationCases = append(local.R.GuildModerationCases, foreign)
				if foreign.R == nil {
					foreign.R = &moderationCaseR{}
				}
				foreign.R.Guild = local
				break
			}
		}
	}

	return nil
}

// AddGuildModerationCasesG adds the given related objects to the existing relationships
// of the moderation_config, optionally inserting them as new records.
// Appends related to o.R.GuildModerationCases.
// Sets related.R.Guild appropriately.
// Uses the global database handle.
func (o *ModerationConfig) AddGuildModerationCasesG(ctx context.Context, insert bool, related ...*ModerationCase) error {
	return o.AddGuildModerationCases(ctx, boil.GetContextDB(), insert, related...)
}

// AddGuildModerationCases adds the given related objects to the existing relationships
// of the moderation_config, optionally inserting them as new records.
// Appends related to o.R.GuildModerationCases.
// Sets related.R.Guild appropriately.
func (o *ModerationConfig) AddGuildModerationCases(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ModerationCase) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.GuildID = o.GuildID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"moderation_cases\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"guild_id"}),
				strmangle.WhereClause("\"", "\"", 2, moderationCasePrimaryKeyColumns),
			)
			values := []interface{}{o.GuildID, rel.GuildID, rel.CaseID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.GuildID = o.GuildID
		}
	}

	if o.R == nil {
		o.R = &moderationConfigR{
			GuildModerationCases: related,
		}
	} else {
		o.R.GuildModerationCases = append(o.R.GuildModerationCases, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &moderationCaseR{
				Guild: o,
			}
		} else {
			rel.R.Guild = o
		}
	}
	return nil
}

// ModerationConfigs retrieves all the records using an executor.
func ModerationConfigs(mods ...qm.QueryMod) moderationConfigQuery {
	mods = append(mods, qm.From("\"moderation_config\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"moderation_config\".*"})
	}

	return moderationConfigQuery{q}
}

// FindModerationConfigG retrieves a single record by ID.
func FindModerationConfigG(ctx context.Context, guildID string, selectCols ...string) (*ModerationConfig, error) {
	return FindModerationConfig(ctx, boil.GetContextDB(), guildID, selectCols...)
}

// FindModerationConfig retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindModerationConfig(ctx context.Context, exec boil.ContextExecutor, guildID string, selectCols ...string) (*ModerationConfig, error) {
	moderationConfigObj := &ModerationConfig{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"moderation_config\" where \"guild_id\"=$1", sel,
	)

	q := queries.Raw(query, guildID)

	err := q.Bind(ctx, exec, moderationConfigObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from moderation_config")
	}

	return moderationConfigObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *ModerationConfig) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ModerationConfig) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no moderation_config provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(moderationConfigColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	moderationConfigInsertCacheMut.RLock()
	cache, cached := moderationConfigInsertCache[key]
	moderationConfigInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			moderationConfigAllColumns,
			moderationConfigColumnsWithDefault,
			moderationConfigColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(moderationConfigType, moderationConfigMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(moderationConfigType, moderationConfigMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"moderation_config\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"moderation_config\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into moderation_config")
	}

	if !cached {
		moderationConfigInsertCacheMut.Lock()
		moderationConfigInsertCache[key] = cache
		moderationConfigInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single ModerationConfig record using the global executor.
// See Update for more documentation.
func (o *ModerationConfig) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the ModerationConfig.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ModerationConfig) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	moderationConfigUpdateCacheMut.RLock()
	cache, cached := moderationConfigUpdateCache[key]
	moderationConfigUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			moderationConfigAllColumns,
			moderationConfigPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update moderation_config, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"moderation_config\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, moderationConfigPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(moderationConfigType, moderationConfigMapping, append(wl, moderationConfigPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update moderation_config row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for moderation_config")
	}

	if !cached {
		moderationConfigUpdateCacheMut.Lock()
		moderationConfigUpdateCache[key] = cache
		moderationConfigUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (q moderationConfigQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q moderationConfigQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for moderation_config")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for moderation_config")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ModerationConfigSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ModerationConfigSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), moderationConfigPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"moderation_config\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, moderationConfigPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in moderationConfig slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all moderationConfig")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *ModerationConfig) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ModerationConfig) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no moderation_config provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(moderationConfigColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	moderationConfigUpsertCacheMut.RLock()
	cache, cached := moderationConfigUpsertCache[key]
	moderationConfigUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			moderationConfigAllColumns,
			moderationConfigColumnsWithDefault,
			moderationConfigColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			moderationConfigAllColumns,
			moderationConfigPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert moderation_config, could not build update column list")
		}

		ret := strmangle.SetComplement(moderationConfigAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(moderationConfigPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert moderation_config, could not build conflict column list")
			}

			conflict = make([]string, len(moderationConfigPrimaryKeyColumns))
			copy(conflict, moderationConfigPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"moderation_config\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(moderationConfigType, moderationConfigMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(moderationConfigType, moderationConfigMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert moderation_config")
	}

	if !cached {
		moderationConfigUpsertCacheMut.Lock()
		moderationConfigUpsertCache[key] = cache
		moderationConfigUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteG deletes a single ModerationConfig record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *ModerationConfig) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single ModerationConfig record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ModerationConfig) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ModerationConfig provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), moderationConfigPrimaryKeyMapping)
	sql := "DELETE FROM \"moderation_config\" WHERE \"guild_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from moderation_config")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for moderation_config")
	}

	return rowsAff, nil
}

func (q moderationConfigQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q moderationConfigQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no moderationConfigQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from moderation_config")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for moderation_config")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o ModerationConfigSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ModerationConfigSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), moderationConfigPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"moderation_config\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, moderationConfigPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from moderationConfig slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for moderation_config")
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *ModerationConfig) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no ModerationConfig provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ModerationConfig) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindModerationConfig(ctx, exec, o.GuildID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ModerationConfigSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty ModerationConfigSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ModerationConfigSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ModerationConfigSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), moderationConfigPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"moderation_config\".* FROM \"moderation_config\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, moderationConfigPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ModerationConfigSlice")
	}

	*o = slice

	return nil
}

// ModerationConfigExistsG checks if the ModerationConfig row exists.
func ModerationConfigExistsG(ctx context.Context, guildID string) (bool, error) {
	return ModerationConfigExists(ctx, boil.GetContextDB(), guildID)
}

// ModerationConfigExists checks if the ModerationConfig row exists.
func ModerationConfigExists(ctx context.Context, exec boil.ContextExecutor, guildID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"moderation_config\" where \"guild_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, guildID)
	}
	row := exec.QueryRowContext(ctx, sql, guildID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if moderation_config exists")
	}

	return exists, nil
}

// Exists checks if the ModerationConfig row exists.
func (o *ModerationConfig) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ModerationConfigExists(ctx, exec, o.GuildID)
}
